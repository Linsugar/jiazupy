# Generated by Django 3.1.5 on 2021-05-19 06:44

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.CharField(max_length=21, unique=True)),
                ('avator_image', models.CharField(max_length=100)),
                ('create_ip', models.CharField(max_length=21)),
                ('city', models.CharField(max_length=16)),
                ('invite_number', models.IntegerField()),
                ('birthday', models.DateTimeField(auto_now_add=True)),
                ('user_mobile', models.CharField(max_length=13, unique=True)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
                ('deviceid', models.CharField(max_length=64)),
                ('platform', models.CharField(max_length=15)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('user_team', models.CharField(max_length=64, null=True)),
                ('user_score', models.IntegerField(default=0)),
                ('user_level', models.IntegerField(default=0)),
                ('user_sex', models.CharField(max_length=12)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Dynamic_Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=16)),
                ('Up_Time', models.DateTimeField(auto_now=True)),
                ('Old_Imagename', models.CharField(max_length=64)),
                ('New_Imagename', models.CharField(max_length=64)),
                ('Up_ImageUrl', models.TextField()),
                ('Up_Context', models.CharField(max_length=200)),
                ('Up_Title', models.CharField(max_length=64)),
                ('Up_addres', models.CharField(max_length=16)),
                ('Up_name', models.CharField(max_length=16)),
                ('Up_avator', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Dynamic_review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_rd', models.IntegerField(default=1)),
                ('recview_avator', models.TextField()),
                ('review_content', models.CharField(max_length=64)),
                ('review_name', models.CharField(max_length=16)),
                ('review_time', models.DateTimeField(auto_now=True)),
                ('review_bool', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feed_id', models.CharField(max_length=20)),
                ('feedback_context', models.TextField()),
                ('feedback_time', models.DateTimeField(auto_now=True)),
                ('feedback_dealpeople', models.CharField(default='Tang', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='releasenew',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('news_id', models.CharField(max_length=16)),
                ('news_title', models.CharField(max_length=64)),
                ('news_context', models.TextField()),
                ('news_url', models.URLField()),
                ('news_avatimage', models.URLField()),
                ('news_username', models.CharField(max_length=16)),
                ('user_id', models.CharField(max_length=32)),
                ('news_time', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='sendtask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.CharField(max_length=16)),
                ('taskcls', models.IntegerField(choices=[(1, '初级任务'), (2, '中级任务'), (3, '高级任务')], default=1)),
                ('tasktime', models.DateTimeField(auto_now=True)),
                ('tasktitle', models.CharField(max_length=16)),
                ('taskcontent', models.TextField()),
                ('taststatue', models.IntegerField(default=1)),
                ('taskid', models.CharField(max_length=64, null=True)),
                ('tasksendid', models.CharField(default='23607016397', max_length=64)),
                ('tasksendname', models.CharField(default='管理员', max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Teams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Team_uid', models.CharField(max_length=64, unique=True)),
                ('Team_name', models.CharField(max_length=16)),
                ('Team_init', models.CharField(max_length=32)),
                ('Team_initid', models.CharField(max_length=64)),
                ('Team_Type', models.CharField(max_length=16)),
                ('Team_Size', models.IntegerField()),
                ('Team_Rank', models.IntegerField(default=1)),
                ('Team_Cover', models.TextField()),
                ('Team_Introduction', models.TextField(max_length=64, null=True)),
                ('Team_City', models.CharField(max_length=10, null=True)),
                ('Team_level', models.IntegerField(default=0)),
                ('Team_Score', models.IntegerField(null=True)),
                ('Team_sex', models.CharField(max_length=12, null=True)),
                ('Team_time', models.DateTimeField(auto_now=True)),
                ('Team_Dismissaltime', models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='weixinartic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wxurl', models.TextField()),
                ('wxtitle', models.CharField(max_length=16)),
                ('wximage', models.TextField()),
                ('wxuserid', models.CharField(max_length=26)),
                ('wxtime', models.DateTimeField(auto_now=True)),
                ('wxclass', models.IntegerField(choices=[(1, '宠物'), (2, '旅游'), (3, '电竞'), (4, '汽车'), (5, '搞笑')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='User_token',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_token', models.CharField(max_length=240)),
                ('token_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User_Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Up_Time', models.TimeField(auto_now=True)),
                ('Up_ImageUrl', models.ImageField(upload_to='%Y/%m/%d/', verbose_name='照片')),
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
